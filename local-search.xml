<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 面向对象部分内容</title>
    <link href="/2021/08/08/PythonLearningNotes/"/>
    <url>/2021/08/08/PythonLearningNotes/</url>
    
    <content type="html"><![CDATA[<p>廖雪峰老师Python新手教程的学习摘录笔记</p><span id="more"></span> <h1 id="Python的学习笔记"><a href="#Python的学习笔记" class="headerlink" title="Python的学习笔记"></a>Python的学习笔记</h1><p>主要参考廖雪峰老师的Python新手教程，一些摘抄和自己的理解。同时也有参考其他的资料，部分参考出处忘记收录了。（下次一定 ⊙﹏⊙∥）</p><p>附上教程链接：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰Python教程</a></p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ol><li>class 中为什么总是有<code>__init__</code>方法，干什么用的？<code>__init__</code>方法用来绑定类中必须拥有的属性，在创建实例的时候，若有<code>__init__</code>方法就不能传入空的参数，但是 self不用传，Python解释器会自己把实例变量传进去。</li><li>在创建类时，方法中的 self参数到底是个啥？在类中的函数（或者说方法）第一个参数”永远“是 self，代表创建的实例本身，用于在内部相互调用。<blockquote><p>e.g. c = self.add() + self.str2int()</p></blockquote></li><li>class Student(object)中 object表示什么？表示该类是从哪个类继承下来的。若没有继承的类，默认为object，因为所有的类都是继承自object类。</li><li>变量名中前双下划线和前后双下划线的意义？在 Python中，变量名类似<code>__xxx__</code>的为特殊变量，其可以直接访问，非 private变量。类似<code>__xxx</code>的为私有变量，外部不能访问。而类似<code>_xxx</code>的是按照约定俗成的规定，虽然可以从外部访问，但是视为私有变量。</li><li>在 class 中的 <code>__init__</code> 方法里总是可以看到<code>super().__init___()</code>，这是什么？</li></ol><h1 id="使用-property装饰器"><a href="#使用-property装饰器" class="headerlink" title="使用@property装饰器"></a>使用@property装饰器</h1><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><span class="hljs-meta">  @property </span><span class="hljs-comment">#装饰器@property使getter方法转化为属性</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> self._score<br><span class="hljs-meta">  @score.setter </span><span class="hljs-comment">#@property本身又创建了另一个装饰器@score.setter，负责把setter方法变成属性赋值</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self, value</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">int</span>):<br>      <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must be an integer&#x27;</span>)<br>    <span class="hljs-keyword">if</span> value &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> value &gt; <span class="hljs-number">100</span> :<br>      <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must between 0~100&#x27;</span>)<br>    self._score = value<br></code></pre></td></tr></table></figure><h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#大类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span>(<span class="hljs-params">Animal</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span>(<span class="hljs-params">Animal</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#各类动物</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Mammal</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bat</span>(<span class="hljs-params">Mammal</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parrot</span>(<span class="hljs-params">Bird</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#定义新类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runnerable</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running&#x27;</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flyable</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fly</span>(<span class="hljs-params"><span class="hljs-string">&#x27;Flying&#x27;</span></span>)</span><br><span class="hljs-function">#多重继承</span><br><span class="hljs-function"><span class="hljs-title">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Mammal, Runnable</span>):</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bat</span>(<span class="hljs-params">Mammal,Flyable</span>):</span><br>  <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h1 id="MixIn设计"><a href="#MixIn设计" class="headerlink" title="MixIn设计"></a>MixIn设计</h1><p>为了更好地看出继承关系，我们把 Runnable和 Flyable改为 RunnableMixIn和 FlyableMixIn。类似的，你还可以定义出肉食动物 CarnivorousMixIn和植食动物 HerbivoresMixIn，让某个动物同时拥有好几个 MixIn：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Mammal, RunnableMixIn, CarnivorousMixIn</span>):</span><br> <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>MixIn 的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑<strong>通过多重继承来组合多个 MixIn 的功能，而不是设计多层次的复杂的继承关系。</strong></p><h1 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h1><h2 id="str-amp-repr"><a href="#str-amp-repr" class="headerlink" title="__str__ &amp; __repr__"></a><code>__str__ &amp; __repr__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>    self.name = name<br><br><span class="hljs-comment">#__str__()方法返回用户看到的字符串</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Student object (name= %s)&#x27;</span> % self.name<br><span class="hljs-comment">#直接显示变量需要调用__repr__()方法，其为程序员调试使用</span><br>  __repr__ = __str__<br></code></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a><code>__iter__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如果一个类想被用于 for ... in 循环，类似 list 或 tuple 那样，就必须实</span><br><span class="hljs-string">现一个__iter__()方法，该方法返回一个迭代对象，然后，Python 的 for</span><br><span class="hljs-string">循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，</span><br><span class="hljs-string">直到遇到 StopIteration 错误时退出循环。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fib</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>    self.a, self.b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span> <span class="hljs-comment">#初始化计数器</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> self <span class="hljs-comment">#示例本身就是迭代对象，故返回自己</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__next__</span>(<span class="hljs-params">self</span>):</span><br>    self.a, self.b = self.b, self.a + self.b<br>    <span class="hljs-keyword">if</span> self.a &gt; <span class="hljs-number">1000</span> : <span class="hljs-comment">#退出条件</span><br>      <span class="hljs-keyword">raise</span> StopIteration():<br>    <span class="hljs-keyword">return</span> self.a <span class="hljs-comment">#返回下一个值</span><br></code></pre></td></tr></table></figure><h2 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">__getitem__方法可以实现像list按下标取出元素</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fib</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, n</span>):</span><br>    a, b = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>      a, b = b, a + b<br>    <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><h2 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a><code>__getattr__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">当调用不存在的属性（attribute）或者函数时，</span><br><span class="hljs-string">Python 解释器会试图调用__getattr__(self, &#x27;score&#x27;)来尝试获得属性，</span><br><span class="hljs-string">这样，我们就有机会返回 score的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>    self.name = <span class="hljs-string">&#x27;Kevin&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, attr</span>):</span><br>    <span class="hljs-keyword">if</span> attr == <span class="hljs-string">&#x27;score&#x27;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">89</span><br><br></code></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">任意类,只需定义一个__call__()方法,</span><br><span class="hljs-string">就可以直接对实例进行调用</span><br><span class="hljs-string">通过 callable()函数，我们就可以判断一个对象</span><br><span class="hljs-string">是否是“可调用”对象。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>    self.name = name<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;My name is %s.&#x27;</span> % self.name)<br></code></pre></td></tr></table></figure><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">类似C++,Python 提供了 Enum 类来实现这个功能</span><br><span class="hljs-string">调用 Enum 的第一个参数是枚举的名称。</span><br><span class="hljs-string">第二个参数是枚举成员名称的来源。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br>Month = Enum(<span class="hljs-string">&#x27;Month&#x27;</span>, (<span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-string">&#x27;Feb&#x27;</span>, <span class="hljs-string">&#x27;Mar&#x27;</span>, <span class="hljs-string">&#x27;Apr&#x27;</span>, <span class="hljs-string">&#x27;May&#x27;</span>, <span class="hljs-string">&#x27;Jun&#x27;</span>, <span class="hljs-string">&#x27;Jul&#x27;</span>, <br><span class="hljs-string">&#x27;Aug&#x27;</span>, <span class="hljs-string">&#x27;Sep&#x27;</span>, <span class="hljs-string">&#x27;Oct&#x27;</span>, <span class="hljs-string">&#x27;Nov&#x27;</span>, <span class="hljs-string">&#x27;Dec&#x27;</span>))<br><br><span class="hljs-keyword">for</span> name, member <span class="hljs-keyword">in</span> Month.__members__.items():<br>  <span class="hljs-built_in">print</span>(name, <span class="hljs-string">&#x27;=&gt;&#x27;</span>, member, <span class="hljs-string">&#x27;,&#x27;</span>, member.value)<br>  <span class="hljs-comment">#value 属性则是自动赋给成员的 int 常量，默认从 1 开始计数</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如果需要更精确地控制枚举类型，</span><br><span class="hljs-string">可以从 Enum 派生出自定义类</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, unique<br><br><span class="hljs-meta">@unique  </span><span class="hljs-comment"># @unique 装饰器可以检查保证没有重复值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weekday</span>(<span class="hljs-params">Enum</span>):</span><br> Sun = <span class="hljs-number">0</span> <span class="hljs-comment"># Sun 的 value 被设定为 0</span><br> Mon = <span class="hljs-number">1</span><br> Tue = <span class="hljs-number">2</span><br> Wed = <span class="hljs-number">3</span><br> Thu = <span class="hljs-number">4</span><br> Fri = <span class="hljs-number">5</span><br> Sat = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>访问枚举类型,既可以用成员名称引用枚举常量，又可以直接根据 value 的值获<br>得枚举常量。</p><h1 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h1><h2 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h2><p><strong><code>class type(object)</code></strong><br><strong><code>class type(name, bases, dict)</code></strong></p><p>传入一个参数时，返回 object 的类型。 返回值是一个 type 对象，通常与 <code>object.__class__</code> 所返回的对象相同。</p><p><em>推荐使用 isinstance() 内置函数来检测对象的类型，因为它会考虑子类的情况。</em></p><p>传入三个参数时，返回一个新的 type 对象。 这在<strong>本质上是 class 语句的一种动态形式</strong>。 name 字符串即类名并且会成为 <code>__name__</code> 属性；bases 元组列出基类并且会成为 <code>__bases__</code> 属性；而 dict 字典为包含类主体定义的命名空间并且会被复制到一个标准字典成为 <code>__dict__</code> 属性。 例如，下面两条语句会创建相同的 type 对象:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span>:</span></span><br><span class="hljs-meta">...</span> <span class="python">    a = <span class="hljs-number">1</span></span><br><span class="hljs-meta">...</span><br><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">X = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;X&#x27;</span>, (<span class="hljs-built_in">object</span>,), <span class="hljs-built_in">dict</span>(a=<span class="hljs-number">1</span>))</span><br></code></pre></td></tr></table></figure><h2 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h2><p>除了使用 type()动态创建类以外，可以使用 metaclass控制类的行为。</p><p>metaclass，直译为元类，简单的解释就是：</p><p>当我们定义了类以后，就可以根据这个类创建出实例，所以：</p><p>先定义类，然后创建实例。</p><p>但是如果我们想创建出类呢？那就必须根据 metaclass 创建出类，所以：<br>先定义 metaclass，然后创建类。</p><p>连接起来就是：先定义 metaclass，就可以创建类，最后创建实例。</p><p>所以，metaclass 允许你创建类或者修改类。换句话说，你可以把类看成<br>是 metaclass 创建出来的“实例”。</p><p>一般来说，应该直接在类的定义中写上方法，但是，有些情况需要通过 metaclass来修改类的定义。例如 ORM——“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="try…except…finally"><a href="#try…except…finally" class="headerlink" title="try…except…finally"></a>try…except…finally</h2><p>当我们认为某些代码可能会出错时，就可以用 try 来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，执行完except语句块后，若有finally语句，则执行finally语句块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try...&#x27;</span>)<br>  r = <span class="hljs-number">10</span> / <span class="hljs-number">0</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result:&#x27;</span>, r)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;except:&#x27;</span>, e)<br><span class="hljs-keyword">finally</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finally...&#x27;</span>) <span class="hljs-comment"># 至此，执行完毕</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;End&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可使用多个except来捕获多个不同类型的错误，也可以在except语句块后加一个else语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try...&#x27;</span>)<br>  r = <span class="hljs-number">10</span> / <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result:&#x27;</span>, r)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ValueError:&#x27;</span>, e)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ZeroDivisionError:&#x27;</span>, e)<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># 若没有错误发生则执行else语句</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no error!&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finally...&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;End&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Python的错误也是 class，所有的错误都继承于 BaseException，所以 except不但会捕获该类型错误，还会把其子类也算在其中。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  foo()<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ValueError&#x27;</span>)<br><span class="hljs-comment"># UnicodeError为ValueError的子类，若出现则已经被上一个except语句捕获</span><br><span class="hljs-keyword">except</span> UnicodeError <span class="hljs-keyword">as</span> e:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;UnicodeError&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用try…except可以跨越多层调用来捕获错误，所以只需要在合适的层次去捕获错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-built_in">int</span>(s)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> foo(s) * <span class="hljs-number">2</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  <span class="hljs-keyword">try</span>:<br>    bar(<span class="hljs-string">&#x27;0&#x27;</span>)<br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, e)<br>  <span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finally...&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="调用堆栈"><a href="#调用堆栈" class="headerlink" title="调用堆栈"></a>调用堆栈</h2><p>若错误未被捕获，它会一直往上抛，最终被 Python解释器捕获，打印一个错误信息，然后退出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># err.py:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-built_in">int</span>(s)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> foo(s) * <span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  bar(<span class="hljs-string">&#x27;0&#x27;</span>)<br>main()<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><blockquote><p>Traceback (most recent call last):<br>File “err.py”, line 11, in <module><br>         main()<br>File “err.py”, line 9, in main<br>         bar(‘0’)<br>     File “err.py”, line 6, in bar<br>         return foo(s) * 2<br>     File “err.py”, line 3, in foo<br>         return 10 / int(s)<br>ZeroDivisionError: division by zero</p></blockquote><h2 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h2><p>Python内置的 logging模块可以记录错误信息的同时让程序继续执行下去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># err_logging.py</span><br><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> /<span class="hljs-built_in">int</span>(s)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>(<span class="hljs-params">s</span>):</span><br>  <span class="hljs-keyword">return</span> foo(s) * <span class="hljs-number">2</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  <span class="hljs-keyword">try</span>:<br>    bar(<span class="hljs-string">&#x27;0&#x27;</span>)<br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    logging.exception(e)<br><br>main()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;End&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这样虽然也会出错，但程序打印完错误信息后会继续执行，并正常退出。这样做可以方便把错误信息记录到日志文件中，方便日后排查。</p><blockquote><p>$ python3 err_logging.py<br>ERROR:root:division by zero<br>Traceback (most recent call last):<br>     File “err_logging.py”, line 13, in main<br>         bar(‘0’)<br>     File “err_logging.py”, line 9, in bar<br>         return foo(s) * 2<br>     File “err_logging.py”, line 6, in foo<br>         return 10 / int(s)<br>ZeroDivisionError: division by zero<br>END</p></blockquote><h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2><p>要知道错误是 class，捕获一个错误即捕获到该 class的一个实例。其不是凭空产生的而是有意创建并抛出的，所以我们可以自己定义一个 class，选择好继承关系，然后用 raise语句抛出一个错误的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># err_raise.py</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FooError</span>(<span class="hljs-params">ValueError</span>):</span><br>  <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  n = <span class="hljs-built_in">int</span>(s)<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">raise</span> FooError(<span class="hljs-string">&#x27;invalid value: %s&#x27;</span> % s)<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / n<br><br>foo(<span class="hljs-string">&#x27;0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是，如无必要，尽量使用内置的错误类型。</p><p>还有另一种错误处理方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># err_reraise.py</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  n = <span class="hljs-built_in">int</span>(s)<br>  <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;invalid value: %s&#x27;</span> % s)<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> /n<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>():</span><br>  <span class="hljs-keyword">try</span>:<br>    foo(<span class="hljs-string">&#x27;0&#x27;</span>)<br>  <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ValueError&#x27;</span>)<br>    <span class="hljs-keyword">raise</span><br>bar()<br></code></pre></td></tr></table></figure><p>在<code>bar()</code>函数中，虽然已经捕获了错误，但是又把错误通过 raise语句抛出。这种错误处理方式没有问题，而且非常常见。捕获错误仅为记录，便于后续跟踪。因为当前函数不在知道如何处理该错误，所以最恰当的方式就是继续往上抛，让顶层调用者去处理。</p><p>raise语句如果不带表达式，raise 会重新引发当前作用域内最后一个激活的异常。 如果当前作用域内没有激活的异常，将会引发 RuntimeError 来提示错误。</p><p>此外，在 except中 raise一个 error，还可以把一种类型的错误转化为另一种类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  <span class="hljs-number">10</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>  <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;input error!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但绝不可以转换毫不相干的两类错误类型。</p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="断言（assert）"><a href="#断言（assert）" class="headerlink" title="断言（assert）"></a>断言（assert）</h2><p>类似于 print()，assert可以在需要查看的地方检查，若断言失败则抛出错误AssertionError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">s</span>):</span><br>  n = <span class="hljs-built_in">int</span>(s)<br>  <span class="hljs-keyword">assert</span> n != <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;n is zero!&#x27;</span><br>  <span class="hljs-comment"># print(&#x27;==&gt; n=%d&#x27; % n)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / n<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  foo(<span class="hljs-string">&#x27;0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>Traceback (most recent call last):<br>     …<br>AssertionError: n is zero!</p></blockquote><p>程序中如果到处充斥着 assert，和 print()相比也好不到哪去。不过，启动 Python 解释器时可以用 -O 参数来关闭 assert</p><p>执行结果：</p><blockquote><p>$ python3 -O err.py<br>Traceback (most recent call last):<br>     …<br>ZeroDivisionError: division by zero</p></blockquote><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>logging不会抛出错误，允许指定记录信息的级别（debug、info、warning、error等），而且可以同时输出到 console和文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br>logging.basicConfig(level=logging.INFO)<br><br>s = <span class="hljs-string">&#x27;0&#x27;</span><br>n = <span class="hljs-built_in">int</span>(s)<br>logging.info(<span class="hljs-string">&#x27;n = %d&#x27;</span> % n)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> / n)<br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>$ python3 err.py<br>INFO:root:n = 0<br>Traceback (most recent call last):<br>File “err.py”, line 8, in <module><br>         print(10 / n)<br>ZeroDivisionError: division by zero</p></blockquote><h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><p>以参数 -m pdb 启动 Python 的调试器 pdb，让程序以单步方式运行，可以随时查看运行状态。</p><blockquote><p>python3 -m pdb err.py</p></blockquote><h2 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a>pdb.set_trace()</h2><p>在 import pdb后，用 pdb.set_trace()设置断点调试。</p><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>上面两种调试方式都可以在IDE中方便的进行。</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>单元测试常见于测试驱动开发（TDD：Test-Driven Development），用于对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><p>一旦编写的一个模块通过了单元测试，若之后发生更改，但其仍能通过单元测试，那么一定程度上它是可用的。</p><p>我们来编写一个 Dict 类，这个类的行为和 dict 一致，但是可以通过属性来访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mydict.py</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dict</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(**kw)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br></code></pre></td></tr></table></figure><p>然后编写 Dict类的单元测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mydict_test.py</span><br><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> mydict <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDict</span>(<span class="hljs-params">unittest.TestCase</span>):</span>  <span class="hljs-comment"># 测试类从unitttest.TestCase继承</span><br>    <span class="hljs-comment"># 只有test开头的方法才是测试方法，对于每类测试都要有一个test_xxx()方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_init</span>(<span class="hljs-params">self</span>):</span><br>        d = <span class="hljs-type">Dict</span>(a=<span class="hljs-number">1</span>, b=<span class="hljs-string">&#x27;test&#x27;</span>)<br>        <span class="hljs-comment"># 然后利用断言输出测试是否符合期望</span><br>        self.assertEqual(d.a, <span class="hljs-number">1</span>)<br>        self.assertEqual(d.b, <span class="hljs-string">&#x27;test&#x27;</span>)<br>        self.assertTrue(<span class="hljs-built_in">isinstance</span>(d, <span class="hljs-built_in">dict</span>))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_key</span>(<span class="hljs-params">self</span>):</span><br>        d = <span class="hljs-type">Dict</span>()<br>        d[<span class="hljs-string">&#x27;key&#x27;</span>] = <span class="hljs-string">&#x27;value&#x27;</span><br>        self.assertEqual(d.key, <span class="hljs-string">&#x27;value&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_attr</span>(<span class="hljs-params">self</span>):</span><br>        d = <span class="hljs-type">Dict</span>()<br>        d.key = <span class="hljs-string">&#x27;value&#x27;</span><br>        self.assertTrue(<span class="hljs-string">&#x27;key&#x27;</span> <span class="hljs-keyword">in</span> d)<br>        self.assertEqual(d[<span class="hljs-string">&#x27;key&#x27;</span>], <span class="hljs-string">&#x27;value&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_keyerror</span>(<span class="hljs-params">self</span>):</span><br>        d = <span class="hljs-type">Dict</span>()<br>        <span class="hljs-keyword">with</span> self.assertRaises(KeyError):<br>            value = d[<span class="hljs-string">&#x27;empty&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_attrerror</span>(<span class="hljs-params">self</span>):</span><br>        d = <span class="hljs-type">Dict</span>()<br>        <span class="hljs-keyword">with</span> self.assertRaises(AttributeError):<br>            value = d.empty<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">利用如下方式运行单元测试，或者使用命令行参数： python3 -m unittest mydict_test</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br><br></code></pre></td></tr></table></figure><h2 id="setUp-amp-tearDown"><a href="#setUp-amp-tearDown" class="headerlink" title="setUp &amp; tearDown"></a>setUp &amp; tearDown</h2><p>在单元测试中，setUp()和 tearDown()这两个特殊的方法会在调用每一个测试方法前后分别执行。若有必要，可以用来方便的连接和关闭数据库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDict</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;setUp...&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tearDown</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;tearDown...&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h1 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h1><p>Python 内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。doctest 严格按照 Python 交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用…表示中间一大段烦人的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mydict.py</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dict</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Simple dict but also support access as x.y style.</span><br><span class="hljs-string">    &gt;&gt;&gt; d1 = Dict()</span><br><span class="hljs-string">    &gt;&gt;&gt; d1[&#x27;x&#x27;] = 100</span><br><span class="hljs-string">    &gt;&gt;&gt; d1.x</span><br><span class="hljs-string">    100</span><br><span class="hljs-string">    &gt;&gt;&gt; d1.y = 200</span><br><span class="hljs-string">    &gt;&gt;&gt; d1[&#x27;y&#x27;]</span><br><span class="hljs-string">    200</span><br><span class="hljs-string">    &gt;&gt;&gt; d2 = Dict(a=1, b=2, c=&#x27;3&#x27;)</span><br><span class="hljs-string">    &gt;&gt;&gt; d2.c</span><br><span class="hljs-string">    &#x27;3&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; d2[&#x27;empty&#x27;]</span><br><span class="hljs-string">    Traceback (most recent call last):</span><br><span class="hljs-string">    ...</span><br><span class="hljs-string">    KeyError: &#x27;empty&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; d2.empty</span><br><span class="hljs-string">    Traceback (most recent call last):</span><br><span class="hljs-string">    ...</span><br><span class="hljs-string">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;empty&#x27;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kw</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(**kw)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self[key] = value<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> doctest<br>    doctest.testmod()<br><br></code></pre></td></tr></table></figure><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><p>要以读文件的模式打开一个文件对象，使用 Python 内置的 open()函数，传入文件名和标示符：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/michael/test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-comment"># 标示符&#x27;r&#x27;表示读</span></span><br></code></pre></td></tr></table></figure><p>如果文件不存在，open()函数就会抛出一个 IOError 的错误，并且给出错误码和详细的信息告诉你文件不存在：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;&gt;&gt; <span class="hljs-keyword">f</span>=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;/Users/michael/notfound.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br> File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>FileNotFoundError: [Errno <span class="hljs-number">2</span>] No such <span class="hljs-keyword">file</span> <span class="hljs-built_in">or</span> directory: <br><span class="hljs-string">&#x27;/Users/michael/notfound.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>如果打开成功，调用 read()方法可以一次读取文件所有内容。文件使用完后必须调用 close()方法关闭，因为文件对象会占用系统资源，而且在写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用 close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。</p><p>由于文件读写可能出现 IOError，一旦出现就无法调用后面的 close()方法。所以为了无论如何都能正确关闭文件，可以使用下面的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 推荐使用 with语句来自动调用 close()方法,更加简洁</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>  <span class="hljs-built_in">print</span>(f.read())<br><br><span class="hljs-comment"># 也可以使用 try语句</span><br><span class="hljs-keyword">try</span>:<br>  f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>  <span class="hljs-built_in">print</span>(f.read)<br><span class="hljs-keyword">finally</span>:<br>  <span class="hljs-keyword">if</span> f:<br>    f.close()<br><br></code></pre></td></tr></table></figure><p>由于 read()方法一次性会读取文件所有内容，小文件自然没问题，但是为了避免读取较大文件时爆内存，可以反复调用 read(size)方法；也可以调用 readline()每次读取一行内容，方便读取配置文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>  <span class="hljs-built_in">print</span>(line.strip()) <span class="hljs-comment"># 删除末尾&#x27;\n&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h2><p>类似于 open()函数返回的有 read()方法对象，在 Python中统称为 file-like Object。</p><p>除了 file 外，还可以是内存的字节流，网络流，自定义流等等。file-like Object 不要求从特定类继承，只要写个 read()方法就行。<br>StringIO 就是在内存中创建的 file-like Object，常用作临时缓冲。</p><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>要读取二进制文件，使用 ‘rb’模式打开文件即可</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">&gt;&gt;&gt; f = open(&#x27;/Users/michael/test.jpg&#x27;, &#x27;rb&#x27;)<br>&gt;&gt;&gt; f.read()<br>b&#x27;<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>d8<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>e1<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>18Exif<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00...&#x27; # 十六进制表示的字节<br></code></pre></td></tr></table></figure><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>在读取文件时，传入 encoding参数来读取不同编码方式的文件。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;gbk.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;gbk&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.read()</span><br>&#x27;测试&#x27;<br></code></pre></td></tr></table></figure><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>传入 ‘w’或 ‘wb’来写文本文件或者二进制文件。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/michael/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.write(<span class="hljs-string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.close()</span><br></code></pre></td></tr></table></figure><h1 id="StringIO-amp-BytesIO"><a href="#StringIO-amp-BytesIO" class="headerlink" title="StringIO &amp; BytesIO"></a>StringIO &amp; BytesIO</h1><h1 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h1><p>使用 StringIO可以在内存中读写 str。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = StringIO()</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.write(<span class="hljs-string">&#x27; &#x27;</span>)</span><br>1<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.write(<span class="hljs-string">&#x27;Hello&#x27;</span>)</span><br>5<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.write(<span class="hljs-string">&#x27;Kevin&#x27;</span>)</span><br>5<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span>(f.getvalue()) <span class="hljs-comment"># getvalue()用来获取写入后的 str</span></span><br> HelloKevin<br></code></pre></td></tr></table></figure><p>要读取 StringIO，可以用一个 str 初始化 StringIO，然后，像读文件一样读取：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = StringIO(<span class="hljs-string">&#x27;Hello Kevin!\nWhat\&#x27;s up.&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="hljs-meta">...</span> <span class="python">    s = f.readline()</span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;&#x27;</span>:</span><br><span class="hljs-meta">...</span> <span class="python">            <span class="hljs-keyword">break</span></span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-built_in">print</span>(s.strip())</span><br><span class="hljs-meta">...</span><br>Hello Kevin!<br>What&#x27;s up.<br></code></pre></td></tr></table></figure><h2 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p>类似于 StringIO，不过是用来读取二进制数据。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = BytesIO()</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.write(<span class="hljs-string">&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><br>6<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span>(f.getvalue())</span><br>b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">&gt;&gt;&gt; print(f.getvalue())<br>b&#x27;<span class="hljs-symbol">\x</span>e4<span class="hljs-symbol">\x</span>b8<span class="hljs-symbol">\x</span>ad<span class="hljs-symbol">\x</span>e6<span class="hljs-symbol">\x</span>96<span class="hljs-symbol">\x</span>87&#x27;<br>&gt;&gt;&gt; from io import BytesIO<br>&gt;&gt;&gt; f = BytesIO(b&#x27;<span class="hljs-symbol">\x</span>e4<span class="hljs-symbol">\x</span>b8<span class="hljs-symbol">\x</span>ad<span class="hljs-symbol">\x</span>e6<span class="hljs-symbol">\x</span>96<span class="hljs-symbol">\x</span>87&#x27;)<br>&gt;&gt;&gt; f.read()<br>b&#x27;<span class="hljs-symbol">\x</span>e4<span class="hljs-symbol">\x</span>b8<span class="hljs-symbol">\x</span>ad<span class="hljs-symbol">\x</span>e6<span class="hljs-symbol">\x</span>96<span class="hljs-symbol">\x</span>87&#x27;<br></code></pre></td></tr></table></figure><h1 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h1><p>Python 的 os 模块封装了操作系统的目录和文件操作，要注意这些函数有的在 os 模块中，有的在 os.path 模块中。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">import</span> os</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">os.name <span class="hljs-comment"># 操作系统类型</span></span><br>&#x27;nt&#x27;<br></code></pre></td></tr></table></figure><p>如果是 posix，说明系统是 Linux、Unix 或 Mac OS X，如果是 nt，就是 Windows<br>系统。</p><p>在操作系统中定义的环境变量，全部保存在 os.environ 这个变量中，可以直接查看。要获取某个环境变量的值，可以调用 os.environ.get(‘key’) 方法。</p><h2 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看当前目录的绝对路径:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-string">&#x27;/Users/michael&#x27;</span><br><span class="hljs-comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&#x27;/Users/michael&#x27;</span>, <span class="hljs-string">&#x27;testdir&#x27;</span>)<br><span class="hljs-string">&#x27;/Users/michael/testdir&#x27;</span><br><span class="hljs-comment"># 然后创建一个目录:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&#x27;/Users/michael/testdir&#x27;</span>)<br><span class="hljs-comment"># 删掉一个目录:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.rmdir(<span class="hljs-string">&#x27;/Users/michael/testdir&#x27;</span>)<br></code></pre></td></tr></table></figure><p>把两个路径合成一个时，不要直接拼字符串，而要通过 os.path.join() 函数，这样可以正确处理不同操作系统的路径分隔符。</p><p>在Linux/Unix/Mac 下，os.path.join() 返回这样的字符串：<br><code>part-1/part-2</code><br>而 Windows 下会返回这样的字符串：<br><code>part-1\part-2</code></p><p>要拆分路径时，也不要直接去拆字符串，而要通过 os.path.split() 函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">&gt;&gt;&gt; <span class="hljs-selector-tag">os</span><span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;/Users/michael/testdir/file.txt&#x27;</span>)<br>(<span class="hljs-string">&#x27;/Users/michael/testdir&#x27;</span>, <span class="hljs-string">&#x27;file.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">&gt;&gt;&gt; <span class="hljs-selector-tag">os</span><span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.splitext</span>(<span class="hljs-string">&#x27;/path/to/file.txt&#x27;</span>)<br>(<span class="hljs-string">&#x27;/path/to/file&#x27;</span>, <span class="hljs-string">&#x27;.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。<br>除了内置的 os 模块，在 shutil 模块中还有很多实用函数，它们可以看做是 os 模块的补充。</p><p>利用 Python 特性可以方便的过滤文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">os</span>.listdir(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.isdir(x)] # 当前目录下所有目录<br>[<span class="hljs-string">&#x27;etc&#x27;</span>]<br>&gt;&gt;&gt; [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">os</span>.listdir(<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.isfile(x) <span class="hljs-keyword">and</span> <br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.splitext(x)[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;.py&#x27;</span>] # 所有 .py 文件<br>[<span class="hljs-string">&#x27;apis.py&#x27;</span>, <span class="hljs-string">&#x27;config.py&#x27;</span>, <span class="hljs-string">&#x27;models.py&#x27;</span>, <span class="hljs-string">&#x27;pymonitor.py&#x27;</span>, <span class="hljs-string">&#x27;test_db.py&#x27;</span>, <br><span class="hljs-string">&#x27;urls.py&#x27;</span>, <span class="hljs-string">&#x27;wsgiapp.py&#x27;</span>]<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h2><p>在把变量从内存中变成可存储或者传输的过程称之为序列化（pickling），其他语言中也称为 serialization, marshalling, flattening 等。反之，叫做反序列化，即 unpickling。</p><p>Python 提供 pickle 模块来实现序列化。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">import</span> pickle</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;Bob&#x27;</span>, age=<span class="hljs-number">20</span>, score=<span class="hljs-number">89</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">pickle.dumps(d) <span class="hljs-comment"># pickle.dumps()方法把任意对象序列化成一个bytes</span></span><br>b&#x27;\x80\x04\x95$\x00\x00\x00\x00\x00\x00\x00&#125;\x94(\x8c\x04name\x94\x8c\x03Bob\x94\x8c\x03age\x94K\x14\x8c\x05score\x94KYu.&#x27;<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dump.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">pickle.dump(d, f) <span class="hljs-comment"># pickle.dump()直接把序列化后的对象写入一个flie-like Object</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.close()</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dump.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = pickle.load(f) <span class="hljs-comment"># pickle.load()方法从一个 file-like Object 中直接反序列化出对象</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">f.close()</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d</span><br>&#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 20, &#x27;score&#x27;: 89&#125;<br></code></pre></td></tr></table></figure><p>考虑到兼容性和安全问题， pickle 可以用来保存不重要的数据，但最好不要用来反序列化未知安全性的数据，以防止执行恶意二进制码。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>要在不同编程语言之间传递对象，必须把对象序列化为标准格式，如：XML、JSON。考虑到 JSON 更快，而且可以直接在 Web 中直接读取，所以格式化为 JSON 会是一种更好的选择。</p><p>JSON 表示的对象就是标准的 JavaScript 语言的对象，JSON 和 Python内置的数据类型对应如下：</p><table><thead><tr><th align="center">JSON</th><th align="center">Pyhton</th></tr></thead><tbody><tr><td align="center">{    }</td><td align="center">dict</td></tr><tr><td align="center">[    ]</td><td align="center">list</td></tr><tr><td align="center">“string”</td><td align="center">str</td></tr><tr><td align="center">123.45</td><td align="center">int 或 float</td></tr><tr><td align="center">true/false</td><td align="center">Ture/False</td></tr><tr><td align="center">null</td><td align="center">None</td></tr></tbody></table><p>Python 对 JSON 的操作类似于 pickle ，如下：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scilab">&gt;&gt;&gt; import json<br>&gt;&gt;&gt; d = dict(name=<span class="hljs-string">&#x27;Bob&#x27;</span>, age=<span class="hljs-number">20</span>, score=<span class="hljs-number">89</span>)<br>&gt;&gt;&gt; json.dumps(d)<br><span class="hljs-string">&#x27;&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Bob<span class="hljs-string">&quot;, &quot;</span>age<span class="hljs-string">&quot;: 20, &quot;</span>score<span class="hljs-string">&quot;: 89&#125;&#x27;</span><br>&gt;&gt;&gt; json_str = <span class="hljs-string">&#x27;&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span>Bob<span class="hljs-string">&quot;, &quot;</span>age<span class="hljs-string">&quot;: 20, &quot;</span>score<span class="hljs-string">&quot;: 89&#125;&#x27;</span><br>&gt;&gt;&gt; json.loads(json_str)<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">89</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h2><p>Python 的 dict 对象可以直接序列化为 JSON 的 { }，若要序列化一个 class 则使用可选参数 default 把任意一个对象变成一个可序列化为 JSON 的对象，但需要为 class 专门写一个转换函数，再把函数传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, score</span>):</span><br>        self.name = name<br>        self.age = age<br>        self.score = score<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">student2dict</span>(<span class="hljs-params">std</span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;name&#x27;</span>: std.name, <span class="hljs-string">&#x27;age&#x27;</span>: std.age, <span class="hljs-string">&#x27;score&#x27;</span>: std.score&#125;<br><br><br>s = Student(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">89</span>)<br><span class="hljs-built_in">print</span>(json.dumps(s, default=student2dict))<br><span class="hljs-comment"># 遇到不同的 class 类，可以取巧使用 __dict__ 属性</span><br><span class="hljs-comment"># 但也有少数例外，比如定义了__slors__的 class</span><br><span class="hljs-built_in">print</span>(json.dumps(s, default=<span class="hljs-keyword">lambda</span> obj: obj.__dict__))<br><br></code></pre></td></tr></table></figure><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>进程由线程组成，操作系统中每一个任务都是一个进程。而操作系统为了实现多任务同时进行需要对进程和线程进行合理调度并在合适的时机杀死进程。实现多任务的方法有以下三种：</p><ul><li>多进程模式</li><li>多线程模式</li><li>多进程+多线程模式</li></ul><h2 id="多进程-multiprocessing"><a href="#多进程-multiprocessing" class="headerlink" title="多进程(multiprocessing)"></a>多进程(multiprocessing)</h2><p>Unix/Linux 系统提供一个 fork() 系统调用，其调用一次返回两次，因为操作系统自动把当前进程（父进程）复制一份（子进程），然后分别在父进程和子进程内返回。</p><p>Python 中 os.fork() 用来 fork 一个子进程。返回子节点中的 0 以及父节点中的子进程标识。如果发生错误则抛出 OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())<br>pid = os.fork()<br><span class="hljs-keyword">if</span> pid == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;child process (%s) ,parent is %s.&#x27;</span> % (os.getpid(), os.getppid()))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))<br></code></pre></td></tr></table></figure><p>输出如下：</p><blockquote><p>Process (9400) start…<br>(9400) just created a child process (9401).<br>child process (9401) ,parent is 9400.</p></blockquote><p>可以看到 if…else 语句确实执行了两次，而且是父进程先返回值。</p><p>有了 fork 调用，一个进程在接到新任务时可以复制一个子进程来处理新任务，常见的 Apache 服务器就是由父进程监听端口，每当有新的 http 请求时，就 fork 一个子进程来处理新的 http 请求。</p><h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><p>Python 中的 multiprocessing 模块为跨平台版本的多进程模块。它提供一个 Process 类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-comment"># 子进程要执行的代码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_proc</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run child process %s (%s)...&#x27;</span> % (name, os.getpid()))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Process(target=run_proc, args=(<span class="hljs-string">&#x27;test&#x27;</span>, ))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process will start.&#x27;</span>)<br>    p.start()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Child process end.&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>Parent process 20204.<br>Child process will start.<br>Run child process test (19332)…<br>Child process end.</p></blockquote><p>创建子进程时， 只需要传入一个执行函数和函数的参数，创建一个 Process 实例，使用 start() 方法启动，使用 join() 方法可以等待子进程结束后再继续往下运行，用于进程间的同步。</p><h2 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h2><p>若有大量子进程，可以用进程池的方式批量创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os, time, random<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">long_time_task</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))<br>    start = time.time()<br>    time.sleep(random.random() * <span class="hljs-number">3</span>)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    p = Pool(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p.apply_async(long_time_task, args=(i, ))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Waiting for all subprocesses done...&#x27;</span>)<br>    p.close()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All subprocesses done.&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>Parent process 7524.<br>Waiting for all subprocesses done…<br>Run task 0 (1152)…<br>Run task 1 (10548)…<br>Run task 2 (9068)…<br>Run task 3 (8240)…<br>Task 3 runs 0.54 seconds.<br>Run task 4 (8240)…<br>Task 4 runs 0.08 seconds.<br>Task 1 runs 0.76 seconds.<br>Task 0 runs 2.47 seconds.<br>Task 2 runs 2.75 seconds.<br>All subprocesses done.</p></blockquote><p>对 Pool 对象调用 join() 方法会等待所有子进程执行完毕，调用 join() 方法之前必须先调用    close() 方法， 调用 close() 后就不能继续添加新的 Process。</p><p>对输出结果可以注意到，task 0，1，2，3 是立刻执行的，而 task4 需要等待前面某个进程结束后才能执行。因为在我的电脑上只有四颗核心，Pool 有意设计成默认为CPU核心数，若改成：<code>p = Pool(5)</code>就可以同时跑5个进程。</p><h2 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h2><p>由于子进程不一定是自身，而是一个外部进程。那么，就还需要控制其输入和输出。而使用 subprocess 可以方便的启动一个子进程并控制其输入和输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nslookup www.python.org&#x27;</span>)<br>r = subprocess.call([<span class="hljs-string">&#x27;nslookup&#x27;</span>, <span class="hljs-string">&#x27;www.python.org&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exit code:&#x27;</span>, r)<br><br></code></pre></td></tr></table></figure><p>在未连接互联网时的执行结果：</p><blockquote><p>nslookup <a href="http://www.python.org/">www.python.org</a><br>服务器:  UnKnown<br>Address:  fec0:0:0:ffff::1</p><p>*** UnKnown 找不到 <a href="http://www.python.org/">www.python.org</a>: No response from server<br>exit code: 0</p></blockquote><p>如果子进程还需要输入，可通过 communicate() 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;$ nslookup&#x27;</span>)<br>p = subprocess.Popen([<span class="hljs-string">&#x27;nslookup&#x27;</span>],<br>                     stdin=subprocess.PIPE,<br>                     stdout=subprocess.PIPE,<br>                     stderr=subprocess.PIPE)<br>output, err = p.communicate(<span class="hljs-string">b&#x27;set q=mx\npython.org\nexit\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(output.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment"># 在 Windows 环境下使用 ANSI 格式解码</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exit code:&#x27;</span>, p.returncode)<br><br></code></pre></td></tr></table></figure><p>上面的代码相当于在命令行执行命令 nslookup，然后手动输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">set q = mx<br>python.org<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>为了满足不同进程间互相通信，操作系统提供了很多机制来实现进程间通信。Python 的 multiprocessing 模块包装了底层机制，提供 Queue、Pipes 等多种方式来交换数据。</p><p>以 Queue 为例，在父进程中创建两个子进程，一个往 Queue 里写数据，一个从 Queue 里读数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><span class="hljs-keyword">import</span> os, time, random<br><br><span class="hljs-comment"># 写数据进程执行的代码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">q</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;process to write:%s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Put %s to queue.&#x27;</span> % value)<br>        q.put(value)<br>        time.sleep(random.random())<br><br><span class="hljs-comment"># 读数据进程执行的代码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">q</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;process to read:%s&#x27;</span> % os.getpid())<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = q.get(<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Get %s from queque.&#x27;</span> % value)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 父进程创建 Queue，并传给各子进程</span><br>    q = Queue()<br>    pw = Process(target=write, args=(q,))<br>    pr = Process(target=read, args=(q,))<br>    <span class="hljs-comment"># 启动子进程 pw，写入</span><br>    pw.start()<br>    <span class="hljs-comment"># 启动子进程 pr, 读取</span><br>    pr.start()<br>    <span class="hljs-comment"># 等待 pw 结束</span><br>    pw.join()<br>    <span class="hljs-comment"># pr 进程为死循环，只能强行终止</span><br>    pr.terminate()<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>process to write:17000<br>Put A to queue.<br>process to read:18772<br>Get A from queque.<br>Put B to queue.<br>Get B from queque.<br>Put C to queue.<br>Get C from queque.</p></blockquote><p>在 Unix/Linux 下，multiprocessing 模块封装了 fork() 调用，不需要关心其实现细节。但由于 Window 没有 fork 调用，因此，multiprocessing 需要“模拟”出 fork 的效果，父进程所有 Python 对象都必须通过 pickle 序列化再传到子进程去，所以，如 multiprocessing 在 Windows 下调用失败了，要先考虑是否 pickle 失败。</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>多任务也可以由进程中多个线程完成。进程是由若干个线程组成的，一个进程至少有一个线程。作为操作系统直接支持的执行单元，线程通常在高级语言中广泛受支持。Python 的线程是真正的 Posix Thread，而不是模拟出来的线程。</p><p>Python 的标准库提供两个模块：<code>_thread</code> 和 threading，threading 是封装了<code>_thread</code>的高级模块。大多数情况，我们只需要使用 threading 这个高级模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br><br><span class="hljs-comment"># 新线程执行的代码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loop</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">5</span>:<br>        n = n + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s&gt;&gt;&gt;%s&#x27;</span> % (threading.current_thread().name, n))<br>        time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)<br><span class="hljs-comment"># 把 loop 函数传入并创建 Thread 实例</span><br>t = threading.Thread(target=loop, name=<span class="hljs-string">&#x27;LoopThread&#x27;</span>)<br>t.start()  <span class="hljs-comment"># 调用 start() 开始执行</span><br>t.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>thread MainThread is running…<br>thread LoopThread is running…<br>thread LoopThread&gt;&gt;&gt;1<br>thread LoopThread&gt;&gt;&gt;2<br>thread LoopThread&gt;&gt;&gt;3<br>thread LoopThread&gt;&gt;&gt;4<br>thread LoopThread&gt;&gt;&gt;5<br>thread LoopThread ended.<br>thread MainThread ended.</p></blockquote><p>任一进程都会创建一个名为 MainThread 的主线程，调用 threading 模块的 <code>current_thread()</code> 函数会返回当前线程的实例。子线程的名字在创建时指定，无特殊意义，用来在打印时显示。</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>多进程与多线程最大的不同在于，多进程中同一变量在各自进程中都有且互不影响。而在多线程中，所有变量都有所以线程共享，所以任一变量都可以被任一线程修改。这样非常容易出现变量内容不符合预期。看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, threading<br><br><span class="hljs-comment"># 假设这是你的银行存款</span><br>balance = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_it</span>(<span class="hljs-params">n</span>):</span><br>  <span class="hljs-comment"># 先取后存，结果应该为0：</span><br>  <span class="hljs-keyword">global</span> balance<br>  balance = balance + n<br>  balance = balance - n<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_thread</span>(<span class="hljs-params">n</span>):</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>    change_it(n)<br><br>t1 = threading.Thread(target = run_thread, args = (<span class="hljs-number">5</span>,))<br>t2 = threading.Thread(target = run_thread, args = (<span class="hljs-number">8</span>,))<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()<br><span class="hljs-built_in">print</span>(balance) <span class="hljs-comment"># 多次输出结果不一定为0</span><br></code></pre></td></tr></table></figure><p>为了确保 balance 的值正确，就要给<code>change_it()</code>上一把锁，当某个进程开始执行<code>change_it()</code>时，因为它获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待锁被释放后获得该锁后才能执行<code>change_it()</code>。创建一个锁就是通过<code>threading.Lock()</code>来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">balance = <span class="hljs-number">0</span><br>lock = threading.Lock()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_thread</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>        <span class="hljs-comment"># 先要获取锁</span><br>        lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            change_it(n)<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 改完一定要释放锁</span><br>            lock.release()<br></code></pre></td></tr></table></figure><p>为了避免等待锁的线程成为“死线程”，要使用 try…finally 来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p><h2 id="多核CPU"><a href="#多核CPU" class="headerlink" title="多核CPU"></a>多核CPU</h2><p>多核CPU应该同时可以执行多个线程，而一个死循环进程会 100% 占用一个CPU，两个死循环则是 200%的CPU，也就是占用两个核心。要想把 N 核 CPU 的核心全部跑满，就必须启动 N 个死循环线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading, multiprocessing<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loop</span>():</span><br>    x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = x ^ <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(multiprocessing.cpu_count()):<br>    t = threading.Thread(target=loop)<br>    t.start()<br><br></code></pre></td></tr></table></figure><p>启动与CPU核心数量相同的 N 个线程，在四核CPU上可以监控到CPU占用率仅有 102%，也就是仅用了一核。</p><p>但是用 C、C++或 Java 来改写相同的死循环，直接可以把全部核心跑满，4 核就跑到 400%，8 核就跑到 800%，为什么 Python 不行呢？</p><p>因为 Python 的线程虽然是真正的线程，但解释器执行代码时，有一个GIL 锁：Global Interpreter Lock，任何 Python 线程执行前，必须先获得GIL 锁，然后，每执行 100 条字节码，解释器就自动释放 GIL 锁，让别的线程有机会执行。这个 GIL 全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在 Python 中只能交替执行，即使 100 个线程跑在 100 核 CPU 上，也只能用到 1 个核。</p><p>GIL 是 Python 解释器设计的历史遗留问题，通常我们用的解释器是官方实现的 CPython，要真正利用多核，除非重写一个不带 GIL 的解释器。所以，在 Python 中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过 C 扩展来实现，不过这样就失去了 Python 简单易用的特点。</p><p>但是，Python 虽然不能利用多线程实现多核任务，却可以通过多进程实现多核任务。多个 Python 进程有各自独立的 GIL 锁，互不影响。</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>在多线程环境下，每个线程都有自己的数据。一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量就必须加锁。</p><p>但是局部变量在函数调用的时候，传递起来很麻烦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_student</span>(<span class="hljs-params">name</span>):</span><br>    std = Student(name)<br>    <span class="hljs-comment"># std 是局部变量，但是每个函数都要使用，因此必须传进去</span><br>    do_task_1(std)<br>    do_task_1(std)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_task_1</span>(<span class="hljs-params">std</span>):</span><br>    do_subtask_1(std)<br>    do_subtask_2(std)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_task_2</span>(<span class="hljs-params">std</span>):</span><br>    do_subtask_2(std)<br>    do_subtask_2(std)<br><br></code></pre></td></tr></table></figure><p>每个函数一层一层调用这样来传参数明显不行，但是又不能用全局变量，因为每个线程处理不同的 Student 对象，不能共享。</p><p>或者可以用一个全局 dict 存放所有的 Student 对象，然后以 thread 自身作为 key 获得线程对应的 Student 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">global_dict = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">std_thread</span>(<span class="hljs-params">name</span>):</span><br>    std = Student(name)<br>    <span class="hljs-comment"># 把 std 放到全局变量 global_dict 中：</span><br>    global_dict[threading.current_thread()] = std<br>    do_task_1()<br>    do_task_2()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_task_1</span>():</span><br>    <span class="hljs-comment"># 不传入 std，而是根据当前线程查找：</span><br>    std = global_dict[threading.current_thread()]<br>    ...<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_task_2</span>():</span><br>    <span class="hljs-comment"># 任何函数都可以查找当前线程的 std 变量：</span><br>    std = global_dict[threading.current_thread()]<br>    ...<br><br><br></code></pre></td></tr></table></figure><p>这种方式是可行的，就是丑了点，我们还有更简单的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment"># 创建全局 ThreadLocal 对象：</span><br>local_school = threading.local()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_student</span>():</span><br>    <span class="hljs-comment"># 获取当前线程关联的 student：</span><br>    std = local_school.student<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, %s (in %s)&#x27;</span> % (std, threading.current_thread().name))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_thread</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-comment"># 绑定 ThreadLocal 的 student：</span><br>    local_school.student = name<br>    process_student()<br><br><br>t1 = threading.Thread(target=process_thread, args=(<span class="hljs-string">&#x27;Alice&#x27;</span>, ), name=<span class="hljs-string">&#x27;Thread-A&#x27;</span>)<br>t2 = threading.Thread(target=process_thread, args=(<span class="hljs-string">&#x27;Bob&#x27;</span>, ), name=<span class="hljs-string">&#x27;Thread-B&#x27;</span>)<br>t1.start()<br>t2.start()<br>t1.join()<br>t2.join()<br><br></code></pre></td></tr></table></figure><p>执行结果</p><blockquote><p>Hello, Alice (in Thread-A)<br>Hello, Bob (in Thread-B)</p></blockquote><p>全局变量 local_school 就是一个 ThreadLocal 对象，每个 Thread 对他都可以读写 student 属性，但互不影响。你可以把 local_school 看成全局变量，但每个属性如 local_school.student 都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLOcal会内部处理。</p><p>可以理解为全局变量 local_school 是一个 dict，不但可以用 local_school.student，还可以绑定其他变量，如 local_school.teacher 等等。</p><p>ThreadLocal 最常用的就是为每一个线程绑定一个数据库连接，HTTP 请求，用户身份信息等，这样一个线程的所有调用的处理函数都可以非常方便的访问这些资源。</p><h1 id="进程-vs-线程"><a href="#进程-vs-线程" class="headerlink" title="进程 vs 线程"></a>进程 vs 线程</h1><p>我们介绍了多进程和多线程，这是实现多任务最常用的两种方式。现在，我们来讨论一 下这两种方式的优缺点。</p><p>首先，要实现多任务，通常我们会设计 Master-Worker 模式，Master 负责分配任务，Worker 负责执行任务，因此，多任务环境下，通常是一个 Master，多个 Worker。 </p><p>如果用多进程实现 Master-Worker，主进程就是 Master，其他进程就是 Worker。</p><p>如果用多线程实现 Master-Worker，主线程就是 Master，其他线程就是 Worker。</p><p>多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他 子进程。（当然主进程挂了所有进程就全挂了，但是 Master 进程只负责分配任务，挂掉的概 率低）著名的 Apache 最早就是采用多进程模式。 多进程模式的缺点是创建进程的代价大，在 Unix/Linux 系统下，用 fork 调用还行，在 Windows 下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和 CPU 的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p><p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是 任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在 Windows 上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操 作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p><p>在 Windows 下，多线程的效率比多进程要高，所以微软的 IIS 服务器默认采用多线程模 式。由于多线程存在稳定性的问题，IIS 的稳定性就不如 Apache。为了缓解这个问题，IIS 和 Apache 现在又有多进程 + 多线程的混合模式，真是把问题越搞越复杂。</p><h2 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h2><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？</p><p>我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化 学这 5 科的作业，每项作业耗时 1 小时。</p><p>如果你先花 1 小时做语文作业，做完了，再花 1 小时做数学作业，这样，依次全部做完， 一共花 5 小时，这种方式称为单任务模型，或者批处理任务模型。</p><p>假设你打算切换到多任务模型，可以先做 1 分钟语文，再切换到数学作业，做 1 分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核 CPU 执行多任务是一样的 了，以幼儿园小朋友的眼光来看，你就正在同时写 5 科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔 （这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作 业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU 寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换 内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任 务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情 况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。</p><p>所以，多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好。</p><h2 id="计算密集型-vs-IO-密集型"><a href="#计算密集型-vs-IO-密集型" class="headerlink" title="计算密集型 vs IO 密集型"></a>计算密集型 vs IO 密集型</h2><p>是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和 IO 密 集型。</p><p>计算密集型任务的特点是要进行大量的计算，消耗 CPU 资源，比如计算圆周率、对视频进行高清解码等等，全靠 CPU 的运算能力。这种计算密集型任务虽然也可以用多任务完成， 但是任务越多，花在任务切换的时间就越多，CPU 执行任务的效率就越低，所以，要最高效 地利用 CPU，计算密集型任务同时进行的数量应当等于 CPU 的核心数。</p><p>计算密集型任务由于主要消耗 CPU 资源，因此，代码运行效率至关重要。Python 这样 的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用 C 语 言编写。</p><p>第二种任务的类型是 IO 密集型，涉及到网络、磁盘 IO 的任务都是 IO 密集型任务，这 类任务的特点是 CPU 消耗很少，任务的大部分时间都在等待 IO 操作完成（因为 IO 的速度 远远低于 CPU 和内存的速度）。对于 IO 密集型任务，任务越多，CPU 效率越高，但也有一 个限度。常见的大部分任务都是 IO 密集型任务，比如 Web 应用。</p><p>IO 密集型任务执行期间，99% 的时间都花在 IO 上，花在 CPU 上的时间很少，因此，用 运行速度极快的 C 语言替换用 Python 这样运行速度极低的脚本语言，完全无法提升运行效 率。对于 IO 密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言 是首选，C 语言最差。</p><h2 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h2><p>考虑到 CPU 和 IO 之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待 IO 操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。</p><p>现代操作系统对 IO 操作已经做了巨大的改进，最大的特点就是支持异步 IO。如果充分利用操作系统提供的异步 IO 支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型，Nginx 就是支持异步 IO 的 Web 服务器，它在单核 CPU 上采用单进程模型就可以高效地支持多任务。在多核 CPU 上，可以运行多个进程（数量与 CPU 核心数相同），充分利用多核 CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效。用异步 IO 编程模型来实现多任务是一个主要的趋势。</p><p>对应到 Python 语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。我们会在后面讨论如何编写协程。</p><h1 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h1><p>Process 比 Thread 更加稳定，而且 Process 可以分布到多台机器上，而 Thread 只能分布到同一机器的多个 CPU 上。</p><p>Python 的 multiprocessing 模块不但支持多进程，其中 managers 子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。由于 managers 模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p><p>举个例子：如果我们已经有一个通过 Queue 通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重，希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？</p><p>原有的 Queue 可以继续使用，但是，通过 managers 模块把 Queue 通过网络暴露出去，就可以让其他机器的进程访问 Queue 了。</p><p>我们先看服务进程，服务进程负责启动 Queue，把 Queue 注册到网络上，然后往 Queue 里面写入任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># task_master.py</span><br><span class="hljs-keyword">import</span> random, time, queue<br><span class="hljs-keyword">from</span> multiprocessing.managers <span class="hljs-keyword">import</span> BaseManager<br><br><span class="hljs-comment"># 发送任务的队列：</span><br>task_queue = queue.Queue()<br><span class="hljs-comment"># 接受结果的队列</span><br>result_queue = queue.Queue()<br><br><br><span class="hljs-comment"># 从 BaseManager 继承的 QueueManager：</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueManager</span>(<span class="hljs-params">BaseManager</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 把两个 Queue 都注册到网络上，callable 参数关联了 Queue 对象：</span><br>QueueManager.register(<span class="hljs-string">&#x27;get_task_queue&#x27;</span>, <span class="hljs-built_in">callable</span>=<span class="hljs-keyword">lambda</span>: task_queue)<br>QueueManager.register(<span class="hljs-string">&#x27;get_result_queue&#x27;</span>, <span class="hljs-built_in">callable</span>=<span class="hljs-keyword">lambda</span>: result_queue)<br><span class="hljs-comment"># 绑定端口 5000，设置验证码&#x27;abc&#x27;：</span><br>manager = QueueManager(address=(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">5000</span>), authkey=<span class="hljs-string">b&#x27;abc&#x27;</span>)<br><span class="hljs-comment"># 启动 Queue：</span><br>manager.start()<br><span class="hljs-comment"># 获得通过网络访问的 Queue 对象：</span><br>task = manager.get_task_queue()<br>result = manager.get_result_queue()<br><span class="hljs-comment"># 放任务：</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    n = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10000</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Put task %d...&#x27;</span> % n)<br>    task.put(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Try get results...&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    r = result.get(timeout=<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: %s&#x27;</span> % r)<br><span class="hljs-comment"># 关闭</span><br>manager.shutdown()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;master exit&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>请注意，当我们在一台机器上写多进程程序时，创建的 Queue 可以直接拿来用，但是，在<br>分布式多进程环境下，添加任务到 Queue 不可以直接对原始的 task_queue 进行操作，那样就绕过了 QueueManager 的封装，必须通过 manager.get_task_queue() 获得的 Queue接口添加。</p><p>然后，在另一台机器启动任务进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># task_worker.py</span><br><span class="hljs-keyword">import</span> time, sys, queue<br><span class="hljs-keyword">from</span> multiprocessing.managers <span class="hljs-keyword">import</span> BaseManager<br><br><br><span class="hljs-comment"># 创建类似的 QueueManager:</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueManager</span>(<span class="hljs-params">BaseManager</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 由于这个 QueueManager 只从网络上获取 Queue，所以注册时只提供名字:</span><br>QueueManager.register(<span class="hljs-string">&#x27;get_task_queue&#x27;</span>)<br>QueueManager.register(<span class="hljs-string">&#x27;get_result_queue&#x27;</span>)<br><span class="hljs-comment"># 连接到服务器，也就是运行 task_master.py 的机器:</span><br>server_addr = <span class="hljs-string">&#x27;192.168.12.1&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Connect to server %s...&#x27;</span> % server_addr)<br><span class="hljs-comment"># 端口和验证码注意保持与 task_master.py 设置的完全一致:</span><br>m = QueueManager(address=(server_addr, <span class="hljs-number">5000</span>), authkey=<span class="hljs-string">b&#x27;abc&#x27;</span>)<br><span class="hljs-comment"># 从网络连接:</span><br>m.connect()<br><span class="hljs-comment"># 获取 Queue 的对象:</span><br>task = m.get_task_queue()<br>result = m.get_result_queue()<br><span class="hljs-comment"># 从 task 队列取任务,并把结果写入 result 队列:</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">try</span>:<br>        n = task.get(timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;run task %d * %d...&#x27;</span> % (n, n))<br>        r = <span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (n, n, n * n)<br>        time.sleep(<span class="hljs-number">1</span>)<br>        result.put(r)<br>    <span class="hljs-keyword">except</span> Queue.Empty:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;task queue is empty.&#x27;</span>)<br><span class="hljs-comment"># 处理结束:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;worker exit.&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>这个 Master/Worker 模型虽然简单，但是就是真正的分布式计算，启动多个 worker 就可以把任务分布到几十台机器上，把任务换成发送邮件，就实现了邮件队列的异步发送。</p><p>Queue 对象存储在 task_master.py 进程中，而 Queue 之所以能通过网络访问，就是通过 QueueManager 实现的。由于 QueueManager 管理的不止一个 Queue，所以要给每个网络调用的接口起个名字，如 get_task_queue。</p><p>authkey 则是为了保证两台机器正常通信，不被恶意干扰。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是一种用来匹配字符串的强有力武器。其设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，就认为它匹配了，否则，该字符串就是不合法的。</p><p>判断一个字符串是否为合法的 Email 时，虽然可以编程提取@前后的子串，再分别判断是否为单词和域名，但是这样做不但麻烦，而且代码难以复用。所以使用正则表达式来匹配用户输入是否合法。</p><p>基础用法：</p><ul><li>[0-9a-zA-Z\_] 可以匹配一个数字、字母或者下划线</li><li>[0-9a-zA-Z\_]+ 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如’a100’，’0_Z’，’Py3000’等等</li><li>[a-zA-Z\_][0-9a-zA-Z_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是 Python合法的变量</li><li>[a-zA-Z_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面 1 个字符+后面最多 19 个字符）</li><li>\d{3}表示匹配 3 个数字，例如’010’</li><li>\s 可以匹配一个空格（也包括 Tab 等空白符），所以\s+表示至少有一个空格，例如匹配’ ‘，’ ‘等</li><li>\d{3,8}表示 3-8 个数字，例如’1234567’</li><li>A|B 可以匹配 A 或 B，所以[P|p]ython 可以匹配’Python’或者’python’</li><li>^表示行的开头，^\d 表示必须以数字开头</li><li>$表示行的结束，\d$表示必须以数字结束</li><li>py 也可以匹配’python’，但是加上^py$就变成了整行匹配，就只能匹配’py’</li></ul><p>基本符号的总结：</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等<br/>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等<br/>但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br/>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br/>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h2 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h2><p>用正则表达式切分字符串比用固定的字符更加灵活，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a  b c&#x27;</span>.split(<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment"># 正常切分</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;\s+&#x27;</span>, <span class="hljs-string">&#x27;a   b c&#x27;</span>) <span class="hljs-comment"># 下面使用正则表达式切分</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;[\s\,]+&#x27;</span>, <span class="hljs-string">&#x27;a,b, c d&#x27;</span>)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;[\s\,\;]+&#x27;</span>, <span class="hljs-string">&#x27;a,b;; c  d&#x27;</span>)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>除了简单地判断是否匹配之外，正则表达式还有提取字串地功能。用 （）表示的就是要提取的分组（Group）。比如：^(\d{3})-(\d{3,8})$ 分别定义了两个组，可以直接从匹配的字符串取出区号和本地号码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.match(<span class="hljs-string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;$)&#x27;</span>, <span class="hljs-string">&#x27;010-324555&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m<br>&lt;re.Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>), match=<span class="hljs-string">&#x27;010-324555&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;010-324555&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;010&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">2</span>)<br><span class="hljs-string">&#x27;324555&#x27;</span><br></code></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在 Match 对象上用 group() 方法提取出字串。</p><p>group(0) 为原始字符串，group(1) 表示第一组子串，之后依次递推。</p><p>这个功能非常有用，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs \">&gt;&gt;&gt; t = &#x27;19:20:13&#x27;<br>&gt;&gt;&gt; m = re.match(r&#x27;^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$&#x27;, t)<br>&gt;&gt;&gt; m.groups()<br>(&#x27;19&#x27;, &#x27;20&#x27;, &#x27;13&#x27;)<br></code></pre></td></tr></table></figure><h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><p>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.match(<span class="hljs-string">r&#x27;^(\d+)(0*)$&#x27;</span>, <span class="hljs-string">&#x27;1000980000&#x27;</span>).groups() <span class="hljs-comment"># 贪婪匹配，无法匹配后面的0</span><br>(<span class="hljs-string">&#x27;1000980000&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.match(<span class="hljs-string">r&#x27;^(\d+?)(0*)$&#x27;</span>, <span class="hljs-string">&#x27;1000980000&#x27;</span>).groups() <span class="hljs-comment"># 使用 \d+? 非贪婪匹配</span><br>(<span class="hljs-string">&#x27;100098&#x27;</span>, <span class="hljs-string">&#x27;0000&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>由于可以能会经常使用正则表达式，考虑到效率问题可以先编译正则表达式然后用其直接匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;</span>) <span class="hljs-comment"># 编译</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="hljs-string">&#x27;010-12345&#x27;</span>).groups() <span class="hljs-comment"># 使用</span><br>(<span class="hljs-string">&#x27;010&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="hljs-string">&#x27;190-90121&#x27;</span>).groups()<br>(<span class="hljs-string">&#x27;190&#x27;</span>, <span class="hljs-string">&#x27;90121&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">re.match(<span class="hljs-string">r&#x27;^([0-9a-zA-Z\_\.]+)([@])([a-z0-9]+\.[a-z]&#123;2,3&#125;)$&#x27;</span>, s)<br>re.match(<span class="hljs-string">r&#x27;^&lt;([a-zA-Z\s]+)&gt;\s([a-zA-Z0-9\_]+[@][a-z0-9]+\.[a-z]&#123;2,3&#125;)$&#x27;</span>, s)<br></code></pre></td></tr></table></figure><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><p>参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta, timezone<br><br><span class="hljs-comment"># 获取当前datetime:</span><br>now = datetime.now()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;now =&#x27;</span>, now)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;type(now) =&#x27;</span>, <span class="hljs-built_in">type</span>(now))<br><br><span class="hljs-comment"># 用指定日期时间创建datetime:</span><br>dt = datetime(<span class="hljs-number">2015</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dt =&#x27;</span>, dt)<br><br><span class="hljs-comment"># 把datetime转换为timestamp:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;datetime -&gt; timestamp:&#x27;</span>, dt.timestamp())<br><br><span class="hljs-comment"># 把timestamp转换为datetime:</span><br>t = dt.timestamp()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;timestamp -&gt; datetime:&#x27;</span>, datetime.fromtimestamp(t))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;timestamp -&gt; datetime as UTC+0:&#x27;</span>, datetime.utcfromtimestamp(t))<br><br><span class="hljs-comment"># 从str读取datetime:</span><br>cday = datetime.strptime(<span class="hljs-string">&#x27;2015-6-1 18:19:59&#x27;</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;strptime:&#x27;</span>, cday)<br><br><span class="hljs-comment"># 把datetime格式化输出:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;strftime:&#x27;</span>, cday.strftime(<span class="hljs-string">&#x27;%a, %b %d %H:%M&#x27;</span>))<br><br><span class="hljs-comment"># 对日期进行加减:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;current datetime =&#x27;</span>, cday)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;current + 10 hours =&#x27;</span>, cday + timedelta(hours=<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;current - 1 day =&#x27;</span>, cday - timedelta(days=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;current + 2.5 days =&#x27;</span>, cday + timedelta(days=<span class="hljs-number">2</span>, hours=<span class="hljs-number">12</span>))<br><br><span class="hljs-comment"># 把时间从UTC+0时区转换为UTC+8:</span><br>utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)<br>utc8_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="hljs-number">8</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;UTC+0:00 now =&#x27;</span>, utc_dt)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;UTC+8:00 now =&#x27;</span>, utc8_dt)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
